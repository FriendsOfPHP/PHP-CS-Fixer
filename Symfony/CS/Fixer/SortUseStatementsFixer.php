<?php

/*
 * This file is part of the PHP CS utility.
 *
 * (c) Fabien Potencier <fabien@symfony.com>
 *
 * This source file is subject to the MIT license that is bundled
 * with this source code in the file LICENSE.
 */

namespace Symfony\CS\Fixer;

use Symfony\CS\FixerInterface;

/**
 * @author Mateusz Heleniak
 */
class SortUseStatementsFixer implements FixerInterface
{
    public function fix(\SplFileInfo $file, $content)
    {
        // some fixtures are auto-generated by Symfony
        // and may contain unsorted use statements
        if (false !== strpos($file, '/Fixtures/')) {
            return $content;
        }

        preg_match_all('/^use\s+(?P<class>[^\s;]+)(?:\s+as\s+(?P<alias>.*))?;/m', $content, $matches, PREG_SET_ORDER);

        if ($matches) {
            usort($matches, function ($a, $b) {
                return strcasecmp($a['class'], $b['class']);
            });

            $code = '';
            foreach ($matches as $m) {
                if (isset($m['alias'])) {
                    $code .= sprintf("use %s as %s;\n", $m['class'], $m['alias']);
                } else {
                    $code .= sprintf("use %s;\n", $m['class']);
                }
            }
            $code .= "\n";

            $regexp  = '/^(?:use\s+(?:[^\s;]+)(?:\s+as\s+(?:[^;]+))?;[\r\n]*){'.count($matches).'}/m';
            $content = preg_replace($regexp, $code, $content);
        }

        return $content;
    }

    public function getLevel()
    {
        return FixerInterface::ALL_LEVEL;
    }

    public function getPriority()
    {
        return 0;
    }

    public function supports(\SplFileInfo $file)
    {
        return 'php' == pathinfo($file->getFilename(), PATHINFO_EXTENSION);
    }

    public function getName()
    {
        return 'sort_use_statements';
    }

    public function getDescription()
    {
        return 'Use statements are sorted alphabetically.';
    }
}
